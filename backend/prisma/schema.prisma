// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model user {
    id String @id @default(uuid())

    username String @unique
    password String

    email       String  @unique
    emailStatus Boolean @default(false)

    firstName String?
    lastName  String?

    country String?
    city    String?
    school  String?

    bio               String?
    profilePictureURL String?

    author author?
    editor editor?
    admin  admin?

    comments comment[]
    sessions session[]

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@map("Users")
}

model session {
    id String @id @default(uuid())

    user   user   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String

    ip     String
    device String

    expirationDate DateTime

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@index([userId])
    @@map("Sessions")
}

model admin {
    id String @id @default(uuid())

    user   user   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String @unique

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@map("Admins")
}

model author {
    id String @id @default(uuid())

    user   user   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String @unique

    post post[]

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@map("Authors")
}

model editor {
    id String @id @default(uuid())

    user   user   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String @unique

    role EEditorRole @default(ordinary)

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@map("Editors")
}

enum EEditorRole {
    ordinary
    main
}

model post {
    id String @id @default(uuid())

    author   author @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId String

    title String
    text  String
    genra String[]

    links String[]
    media String[]

    views Int @default(0)

    status EPostStatus @default(draft)

    comments comment[]

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@index([authorId])
    @@map("Posts")
}

enum EPostStatus {
    draft
    check
    production
}

model comment {
    id String @id @default(uuid())

    user   user   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String

    text String

    post   post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId String

    createdAt DateTime @default(now())
    alteredAt DateTime @default(now()) @updatedAt

    @@index([userId])
    @@index([postId])
    @@map("Comments")
}
